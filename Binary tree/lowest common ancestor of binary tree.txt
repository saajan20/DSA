struct Node *findLCA(struct Node* root, int n1, int n2) 
{ 
    // Base case 
    if (root == NULL) return NULL; 
  
    // If either n1 or n2 matches with root's key, report 
    // the presence by returning root (Note that if a key is 
    // ancestor of other, then the ancestor key becomes LCA 
    if (root->key == n1 || root->key == n2) 
        return root; 
  
    // Look for keys in left and right subtrees 
    Node *left_lca  = findLCA(root->left, n1, n2); 
    Node *right_lca = findLCA(root->right, n1, n2); 
  
    // If both of the above calls return Non-NULL, then one key 
    // is present in once subtree and other is present in other, 
    // So this node is the LCA 
    if (left_lca && right_lca)  return root; 
  
    // Otherwise check if left subtree or right subtree is LCA 
    return (left_lca != NULL)? left_lca: right_lca; 
} 






  bool path(Node *root,int n,vector<Node*> &v)
   {   
       bool a;
       if(root==NULL)
       return false;
       v.push_back(root);
       if(root->data==n)
       return true;
       if(root->left)
{
       a=path(root->left,n,v);
       if(a)
       return true;
}
       if(root->right)
{
       a=path(root->right,n,v);
       if(a)
       return true;
}
       v.pop_back();
       return false;
       
   }
Node * lca(Node* root ,int n1 ,int n2 )
{
   //Your code here 
   if(n1==n2)
   return new Node(n1);
   vector <Node*> v1;
   vector <Node*> v2;
   v1.clear();
   v2.clear();
   bool a=path(root,n1,v1);
   bool b=path(root,n2,v2);
   int i,f=0;;
  for(i=0;i<v1.size()&&i<v2.size();i++)
  {
      if(v1[i]->data!=v2[i]->data)
      {
          f=1;
          break;
      }
  }
  if(v1[i-1]->data==v2[i-1]->data)
  f=1;
 if(f)
 return v1[i-1];
 else
 return new Node(-1);
   
}