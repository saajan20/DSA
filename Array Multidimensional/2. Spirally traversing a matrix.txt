Problem:

https://www.geeksforgeeks.org/print-a-given-matrix-in-spiral-form/

Solution:

1. Taking right turn when dead end

 vector<int> spirallyTraverse(vector<vector<int> > matrix, int r, int c) 
    {
        // code here 
        vector<int> ans;
        
        int visited[r][c];
        memset( visited, 0, sizeof(visited) );
        
        int dr[] = {0, 1, 0, -1 };
        int dc[] = {1, 0, -1, 0 };
        
        int di = 0 ;
        int x,y,xnew,ynew;
        x=y=xnew=ynew=0;
        ans.clear();
        for(int i=0; i<r*c; i++){
            
            ans.push_back(matrix[x][y]);
          
            visited[x][y] = 1;
            
            xnew = x+dr[di];
            ynew = y+dc[di];
            
            //check if next pair is valid or not
            if(xnew<r && xnew>=0 && ynew>=0 && ynew<c && visited[xnew][ynew]==0){
               x=xnew;
               y=ynew;
            }else{
                //shift right
                di = (di + 1)%4;
                x+=dr[di];
                y+=dc[di];
            }
        
        }
        return ans;
    }

2. Removing row and column once traversed

vector<int> spirallyTraverse(vector<vector<int> > matrix, int r, int c) 
    {
        // code here 
        vector<int> ans;
        
        int startRow, endRow, startColumn, endColumn;
        startRow=startColumn=0;
        endRow=r; endColumn=c;
        
        while(startRow<endRow && startColumn<endColumn){
             int i;
             
            //left to right
            for(i=startColumn;i<endColumn;i++)
            ans.push_back(matrix[startRow][i]);
            startRow++; //remove first row
            
            //top to bottom
            for(i=startRow;i<endRow;i++)
            ans.push_back(matrix[i][endColumn-1]);
            endColumn--; //remove last column
            
            //right to left
            if(startRow<endRow){
            for(i=endColumn-1;i>=startColumn;i--)
            ans.push_back(matrix[endRow-1][i]);
            }
            endRow--; //remove last row
            
             //bottom to top
            if(startColumn<endColumn){
            for(i=endRow-1;i>=startRow;i--)
            ans.push_back(matrix[i][startColumn]);
            }
            startColumn++; // remove first column
            
        }
        return ans;
    }
    