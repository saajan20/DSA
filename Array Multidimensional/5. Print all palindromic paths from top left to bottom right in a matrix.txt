Problem
https://www.geeksforgeeks.org/print-palindromic-paths-top-left-bottom-right-matrix/

Solution:

bool isPalin(string str)
{
    int len = str.length() / 2;
    for (int i = 0; i < len; i++)
    {
        if (str[i] != str[str.length() - i - 1])
            return false;
    }
    return true;
}
 
// i and j are row and column indexes of current cell
// (initially these are 0 and 0).
void palindromicPath(string str, char a[][N],
                            int i, int j, int n, int m)
{
         
    // If we have not reached bottom right corner, keep
    // exploring
    if (j < m - 1 || i < n - 1)
    {
        if (i < n - 1)
            palindromicPath(str + a[i][j], a, i + 1, j, m, n);
        if (j < m - 1)
            palindromicPath(str + a[i][j], a, i, j + 1, m, n);
    }
 
    // If we reach bottom right corner, we check if
    // if the path used is palindrome or not.
    else {
        str = str + a[n - 1][m - 1];
        if (isPalin(str))
            cout<<(str)<<endl;
    }
}