Eg Graph: 0<->1,0<->2,0<->3,1<->2,2<->3,1<->3

int Prim_MST(int startNode, vector<pair<int,int>> graph[]){
    
    //min-heap
    //store active edges
    //it will always return active edge with smallest cost
    priority_queue< pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>> > q;
    
    //1->part of MST set, 0->yet to be visited
    bool visited[n];
    memset(visited,false,sizeof(visited));
    
    int cost=0;
    
    //first->cost,second->destination
    Q.push({0,startNode});// for reaching startNode the cost is 0
    
    while(!Q.empty()){
        
        auto best = Q.top(); //path with min cost
        Q.pop();
        
        int dest = best.second;
        int pathCost = best.first;
        
        if(!visited[dest]){ //if path to dest isn't there
            cost+=pathCost;
            visited[dest] = true;
            
            for(auto newPath:graph[dest]){
                if(!visited[newPath.first])
                    Q.push({newPath.second,newPath.first});//add new active edges
            }
        }
    }
    return cost;
}