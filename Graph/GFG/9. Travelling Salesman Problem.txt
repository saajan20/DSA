
int tsp(vector<vector<int>> dist, int setOfCities, int currentCity, int noOfCities, vector<vector<int>> &dp){

 //base case
 if(setOfCities == (1<<n) - 1){
  return dist[currentCity][0];
 }

 if(dp[setOfCities][currentCity]!=-1){
  return dp[setOfCities][currentCity];
 }

 int ans = INT_MAX;
 for(int choide=0;choice<n;choice++){
  
 if(!(setOfCities & (1<<choice))){
 
 int subProb = dist[city][choice] + tsp(dist, setOfCities|(1<<choice), choice,n,dp);
 ans = min(ans, subProb);
   }

 }
 return dp[setOfCities][city] = ans;
}










int main(){

  vector<vector<int>> dist = {
   {0,20,42,25},
   {20,0,30,34},
   {42,30,0,10},
   {25,34,10,0}
  };

 int n =4;
 vector< vector<int> > dp(1<<n, vector<int>(n,-1));
 cout << tsp(dist,1,0,n,dp);

}