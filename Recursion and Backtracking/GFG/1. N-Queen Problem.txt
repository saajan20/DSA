theory: https://www.scaler.com/topics/data-structures/backtracking-algorithm/

Problem:https://www.geeksforgeeks.org/printing-solutions-n-queen-problem/
Solution: https://practice.geeksforgeeks.org/viewSol.php?subId=71b68ce6199516ac80113f094fc3ac6e&pid=705336&user=saajankumarjha (column wise)

My row wise approach

bool nQueenProblem(int board[][n], int row,int n){

	if(row==n) //all queens placed
		return true;

	for(int i = 0 ; i<n ; i++){
		
		if(isSafe(board,row,i,n)){

			board[row][i] = 1;
			if(nQueenProblem(board,row+1,n))
				return true;
			board[row][i] = 0;
		}
	}
 return false;
}

bool isSafe(board,row,col,n){

	for(i=0;i<row;i++) //check if any queen is already there on the col
        if(board[i][col])
	return false;

	for(i=row-1,j=col-1;i>=0&&j>=0;i--,j--){
	if(board[i][j])
	return false;
	}

	for(i=row-1,j=col+1;i>=0&&j<n;i--,j++){
	if(board[i][j])
	return false;
	}

return true;


}
	
Optimization in is_safe() function 
The idea is not to check every element in right and left diagonal, instead use property of diagonals: 
1. The sum of i and j is constant and unique for each right diagonal, where i is the row of element and j is the 
column of element. 
2. The difference of i and j is constant and unique for each left diagonal, where i and j are row and column of element respectively.

see the approach in GFG link
https://www.geeksforgeeks.org/n-queen-problem-backtracking-3/

