//simple implementation
class Graph{
    int V; //no Of nodes
    list<pair<int,int>> edges; //list of edges
    
public:
    Graph(int V){
        this->V = V;
    }
    
    void addEdge(int u,int v){
        edges.push_back(make_pair(u,v));
    }
    
    int find(int i, int parent[]){
        if(parent[i]==-1)
        return i;
        else
        return find(parent, parent[i]);
    }
    
    void union(int set1,int set2,int parent[]){
            parent[set2] = set1
    }
    
    bool containCycle(){
        int parent[V];
        for(int i=0;i<V;i++)
        parent[i] = -1;
        
        for(auto edge : edges){
            int i = edge.first;
            int j = edge.second;
            
            int s1 = findSet(i,parent);
            int s2 = findSet(j,parent);
            
            if(s1!=s2)
            union(s1,s2,parent);
            else
            return true;
        }
        return false;
    }
    
}

//Path Compression and Union by Rank

class Graph{
    int V; //no Of nodes
    list<pair<int,int>> edges; //list of edges
    
public:
    Graph(int V){
        this->V = V;
    }
    
    void addEdge(int u,int v){
        edges.push_back(make_pair(u,v));
    }
    
    //path compression optimisation
    int find(int i, int parent[]){
        if(parent[i]==-1)
        return i;
        else
        return parent[i] = find(parent[i],parent); //optimisation for next run
    }
    
    //union by rank
    void union_set(int set1,int set2,int parent[],int rank[]){
           if(rank[set1]>=rank[set2]){
               parent[set2] = set1;
               rank[set1]+=rank[set2];
           }else{
               parent[set1] = set2;
               rank[set2]+=rank[set1];
           }
    }
    
    bool containCycle(){
        int parent[V];
        int rank[V]; //for keeping track on rank
        
        for(int i=0;i<V;i++){
        parent[i] = -1;
        rank[i] = 1;    
        }
        
        for(auto edge : edges){
            int i = edge.first;
            int j = edge.second;
            
            int s1 = find(i,parent);
            int s2 = find(j,parent);
            
            if(s1!=s2)
            union_set(s1,s2,parent,rank);
            else
            return true;
        }
        return false;
    }
};

int main() {    
   Graph g(7);
   g.addEdge(0,1);
   g.addEdge(1,2);
   g.addEdge(2,3);
   g.addEdge(0,4);
   g.addEdge(5,6);
   g.addEdge(2,5);
   g.addEdge(2,6);
   cout<<g.containCycle()<<endl;
}