Problem: https://www.geeksforgeeks.org/cutting-a-rod-dp-13/
https://www.youtube.com/watch?v=SZqAQLjDsag&list=PL_z_8CaSLPWekqhdCPmFohncHwz8TY2Go&index=14

Solution:

//Recurisive
 int cutRodMaximumProfit(int price[], int rodLength,int cutSize){
        
        if(rodLength==0)//when we don't have rod
        return 0;
        
        if(cutSize==0)//when we can't cut
        return 0;
        
        if(cutSize<=rodLength){
            return max(price[cutSize-1] + cutRodMaximumProfit(price, rodLength-cutSize, cutSize), cutRodMaximumProfit(price, rodLength, cutSize-1) );
        }//trying out solution with or without nth element
        
        return cutRodMaximumProfit(price, rodLength, cutSize-1);//going for n-1 incase n isn't possible
    }

//bottom-up

 int cutRodMaximumProfit(int price[], int rodLength,int cutSize){
        
        int a[cutSize+1][rodLength+1];
        int i,j;
        
        for(j=0;j<=rodLength;j++)
        a[0][j] = 0;
        
        for(i=0;i<=cutSize;i++)
        a[i][0] = 0;
        
        for(i=1;i<=cutSize;i++){
            for(j=1;j<=rodLength;j++){
                if(i<=j){
                    a[i][j] = max(price[i-1]+a[i][j-i],a[i-1][j]);
                }
                else
                a[i][j]=a[i-1][j];
            }
        }
        return a[cutSize][rodLength];
    }

In this problem since we can cut rod from 1 to N, every option is a possible solution since we can cut rod until nothings left.

But there's a variation to it wherein you can cut only given size from rod and in the end you maybe left with a rod of invalid size, to handle such case
we need to slightly modify our code

Problem: https://practice.geeksforgeeks.org/problems/cutted-segments1642/1
Rods can be cut in x,y and z only
o/p: max number of valid cuts
Solution:

Recursive

 xCut=yCut=zCut=0;
        if(n==0) //rod length 0
        return 0;
        
        int remainCuts;
        if(x<=n){
            remainCuts = maximizeTheCuts(n-x,x,y,z);
            if(remainCuts){
                xCut = 1 + remainCuts;
            }else{
                if(x==n)
                xCut = 1;
            }
        }
        
        
        if(y<=n){
            remainCuts = maximizeTheCuts(n-y,x,y,z);
            if(remainCuts){
                yCut = 1 + remainCuts;
            }else{
                if(y==n)
                yCut = 1;
            }
        }
        
        if(z<=n){
            remainCuts = maximizeTheCuts(n-z,x,y,z);
            if(remainCuts){
                zCut = 1 + remainCuts;
            }else{
                if(z==n)
                zCut = 1;
            }
        }
       
        int maxElement=(xCut > yCut) ?
          (xCut > zCut ? xCut : zCut) :
          (yCut > zCut ? yCut : zCut);
        
        return maxElement;
}

//bottom-up

 int maximizeTheCuts(int n, int x, int y, int z)
    {
        //Your code here
        int xCut,yCut,zCut;
        int a[n+1];
        memset(a,0,sizeof(a));
        for(int i=1; i<=n;i++){
            xCut=yCut=zCut=0;
            if(x<=i){
                if(!(a[i-x]==0 && i!=x))
                  xCut = 1 + a[i-x];
            }
          
        
            if(y<=i){
                if(!(a[i-y]==0 && i!=y))
                  yCut = 1 + a[i-y];
            }
        
            if(z<=i){
                if(!(a[i-z]==0 && i!=z))
                  zCut = 1 + a[i-z];
            }
            
            
          a[i]=(xCut > yCut) ?
          (xCut > zCut ? xCut : zCut) :
          (yCut > zCut ? yCut : zCut);
        }
        return a[n];
}

//another approach


 int maximizeTheCuts(int n, int x, int y, int z)
    {
        //Your code here
        
        int cuts[3] = {x,y,z};
        return maximize(cuts,n,3);
    }
    
    int maximize(int cuts[], int l, int n){
        if(l==0)
        return 0;
        if(n==0)
        return 0;
        
        if(cuts[n-1]<=l){
            int futureCuts = maximize(cuts,l-cuts[n-1],n);
            if(futureCuts){
                futureCuts++;
            }
            else if((l-cuts[n-1])==0){
                futureCuts =1;
            }
            
            return max(futureCuts, maximize(cuts,l,n-1));
        }
        else{
           return maximize(cuts,l,n-1);
        }
    }