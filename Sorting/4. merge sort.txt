void merge( int a[],int l,int r,int mid)
{
    int n1=mid-l+1;
    int n2=r-mid;
    int left[n1],right[n2];
    
    for(i=0;i<n1;i++)
    left[i]=a[l+i];
    
    for(i=0;i<n2;i++)
    right[i]=a[mid+1+i];
    i=0;
    int j=0,k=l;
    while(i<n1 && j<n2)
    {
        if(left[i] <= right[j])
        {
            a[k]=left[i++];
        }
        else
        {
            a[k]=right[j++];
        }
        
        k++;
    }
    while(i<n1)
    a[k++]=left[i++];
    
    while(j<n2)
    a[k++]=right[j++];
    
}
void mergesort(int a[],int start,int end)
{
    if(start<end)
    {
        int mid=start+(end-start)/2;
        mergesort(a,start,mid);
        mergesort(a,mid+1,end);
        merge(a,start,end,mid);
    }
}

-------------------------------------------------------
Another approach more intuitive

void mergesort(int a[], int n){
 int mid = (n/2);
 int leftSize = mid;
 int rightSize = n - mid;
 int leftArray[leftSize], rightArray[rightSize];
 
 for( int i=0;i<leftsize;i++){
  leftArray[i] = a[i];
  }

  for( int i=0;i<rightSize;i++){
  rightArray[i] = a[mid+i];
  }

 mergesort(leftArray, leftsize);
 mergesort(rightArray, rightSize);
 merge(leftArray, rightArray, a, n);

}

 void merge(int leftArray[], int rightArray[], int a[], int n){

 int mid = (n/2);
 int leftSize = mid;
 int rightSize = n - mid;

 while(i<n1 && j<n2)
    {
        if(left[i] <= right[j])
        {
            a[k]=left[i++];
        }
        else
        {
            a[k]=right[j++];
        }
        
        k++;
    }
    while(i<n1)
    a[k++]=left[i++];
    
    while(j<n2)
    a[k++]=right[j++];
 


}
