Problem: https://www.geeksforgeeks.org/counting-inversions/

long long int merge( int a[],int l,int r,int mid)
{
    int n1=mid-l+1;
    int n2=r-mid;
    int left[n1],right[n2];
    
    for(i=0;i<n1;i++)
    left[i]=a[l+i];
    
    for(i=0;i<n2;i++)
    right[i]=a[mid+1+i];
    i=0;
    int j=0,k=l;
    long long int inv_count = 0;
    while(i<n1 && j<n2)
    {
        if(left[i] <= right[j])
        {
            a[k]=left[i++];
        }
        else
        {
            a[k]=right[j++];
	    inv_count += (n1-i); //count of number of elements in left array greater than current right element.(no of elements greater = no of swaps required)
        }
        
        k++;
    }
    while(i<n1)
    a[k++]=left[i++];
    
    while(j<n2)
    a[k++]=right[j++];

   return inv_count;
    
}

long long int mergesort(int a[],int start,int end)
{
    long long int inv_count =0;
    if(start<end)
    {
        int mid=start+(end-start)/2;
        inv_count += mergesort(a,start,mid);
        inv_count += mergesort(a,mid+1,end);
        inv_count += merge(a,start,end,mid);
    }
  return inv_count;
}
